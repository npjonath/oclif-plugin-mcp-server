import {Args, Command, Flags} from '@oclif/core'

export default class TestArgsOptional extends Command {
  static args = {
    description: Args.string({
      description: 'Project description (optional)',
      required: false,
    }),
    projectName: Args.string({
      description: 'Project name (optional)',
      required: false,
    }),
    version: Args.string({
      description: 'Version number (optional)',
      required: false,
    }),
  }
  static description = 'Demonstrates optional arguments with default handling for MCP schema generation'
  static examples = [
    `$ example test-args-optional`,
    `$ example test-args-optional myproject`,
    `$ example test-args-optional myproject v1.0.0`,
    `$ example test-args-optional myproject v1.0.0 "Project description"`,
  ]
  static flags = {
    language: Flags.option({
      char: 'l',
      default: 'typescript',
      description: 'Programming language',
      options: ['javascript', 'typescript', 'python', 'go', 'rust'],
    })(),
    license: Flags.string({
      default: 'MIT',
      description: 'License type',
    }),
    private: Flags.boolean({
      char: 'p',
      default: false,
      description: 'Private project',
    }),
    template: Flags.option({
      char: 't',
      default: 'basic',
      description: 'Project template',
      options: ['basic', 'web', 'api', 'cli', 'library'],
    })(),
  }
  static summary = 'Test optional positional arguments'

  async run(): Promise<void> {
    const {args, flags} = await this.parse(TestArgsOptional)

    // Apply defaults for optional args
    const projectName = args.projectName || `project-${Date.now()}`
    const version = args.version || '1.0.0'
    const description = args.description || 'A new project'

    this.log('=== Optional Arguments Test Results ===')
    this.log(`Project Name: ${projectName} ${args.projectName ? '' : '(generated)'}`)
    this.log(`Version: ${version} ${args.version ? '' : '(default)'}`)
    this.log(`Description: ${description} ${args.description ? '' : '(default)'}`)
    this.log(`Template: ${flags.template}`)
    this.log(`Language: ${flags.language}`)
    this.log(`Private: ${flags.private}`)
    this.log(`License: ${flags.license}`)

    // Generate project configuration
    const projectConfig = {
      author: 'Generated by example CLI',
      dependencies: this.generateDependencies(flags.language, flags.template),
      description,
      language: flags.language,
      license: flags.license,
      name: projectName,
      private: flags.private,
      scripts: this.generateScripts(flags.template),
      template: flags.template,
      version,
    }

    this.log('\nüì¶ Generated Project Configuration:')
    this.log(JSON.stringify(projectConfig, null, 2))

    // Show what was auto-generated vs provided
    const autoGenerated = []
    if (!args.projectName) autoGenerated.push('project name')
    if (!args.version) autoGenerated.push('version')
    if (!args.description) autoGenerated.push('description')

    if (autoGenerated.length > 0) {
      this.log(`\nü§ñ Auto-generated: ${autoGenerated.join(', ')}`)
    } else {
      this.log('\n‚úÖ All arguments provided by user')
    }

    // Template-specific messages
    switch (flags.template) {
      case 'api': {
        this.log('\nüîå API project template includes server frameworks')

        break
      }

      case 'cli': {
        this.log('\n‚ö° CLI project template includes command-line utilities')

        break
      }

      case 'web': {
        this.log('\nüåê Web project template includes frontend tooling')

        break
      }
      // No default
    }

    this.log(
      `\nüìä Summary: ${flags.private ? 'Private' : 'Public'} ${flags.language} ${flags.template} project created`,
    )
  }

  private generateDependencies(language: string, template: string): Record<string, string> {
    const deps: Record<string, string> = {}

    if (language === 'typescript') {
      deps.typescript = '^5.0.0'
      deps['@types/node'] = '^18.0.0'
    } else if (language === 'javascript') {
      deps.node = '^18.0.0'
    }

    switch (template) {
      case 'api': {
        deps.express = '^4.0.0'
        deps.cors = '^2.0.0'

        break
      }

      case 'cli': {
        deps['@oclif/core'] = '^4.0.0'

        break
      }

      case 'web': {
        deps.react = '^18.0.0'
        deps.webpack = '^5.0.0'

        break
      }
      // No default
    }

    return deps
  }

  private generateScripts(template: string): Record<string, string> {
    const baseScripts = {
      build: 'build command',
      lint: 'lint command',
      test: 'test command',
    }

    if (template === 'web') {
      return {...baseScripts, build: 'build for production', start: 'start dev server'}
    }

    if (template === 'api') {
      return {...baseScripts, dev: 'start dev server', start: 'start server'}
    }

    if (template === 'cli') {
      return {...baseScripts, build: 'build CLI', link: 'link CLI globally'}
    }

    return baseScripts
  }
}
